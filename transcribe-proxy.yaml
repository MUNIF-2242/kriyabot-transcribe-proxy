AWSTemplateFormatVersion: "2010-09-09"
Description: EC2 instance with Elastic IP, Let's Encrypt SSL, and access to Transcribe via IAM Role

Parameters:
  DomainName:
    Type: String
    Description: FQDN to assign (e.g., transcribe.yourdomain.com)
  HostedZoneName:
    Type: String
    Description: Hosted Zone Name (e.g., yourdomain.com.)

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP, HTTPS, WebSocket (443), SSH
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  TranscribeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  TranscribeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref TranscribeInstanceRole

  TranscribeProxyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-08a6efd148b1f7504 # Amazon Linux 2
      IamInstanceProfile: !Ref TranscribeInstanceProfile
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
          yum install -y nodejs git nginx certbot python3-certbot-nginx

          mkdir -p /home/ec2-user/app
          cd /home/ec2-user
          git clone -b prod https://github.com/MUNIF-2242/kriyabot-transcribe-proxy.git app
          cd app
          npm install

          cat > /etc/nginx/conf.d/${DomainName}.conf << EOF
          server {
              listen 80;
              server_name ${DomainName};

              location /.well-known/acme-challenge/ {
                  root /var/www/certbot;
              }

              location / {
                  return 301 https://\$host\$request_uri;
              }
          }
          EOF

          mkdir -p /var/www/certbot
          systemctl enable nginx
          systemctl start nginx

          certbot certonly --webroot -w /var/www/certbot -d ${DomainName} --non-interactive --agree-tos --email admin@${DomainName}

          # Wait for certbot certificate files up to 5 minutes (60 attempts * 5 seconds)
          for i in {1..60}; do
            if [ -f "/etc/letsencrypt/live/${DomainName}/fullchain.pem" ] && [ -f "/etc/letsencrypt/live/${DomainName}/privkey.pem" ]; then
              echo "✅ SSL certificate found!"
              break
            else
              echo "⏳ Waiting for certificate to be generated... ($i/60)"
              sleep 5
            fi

            if [ "$i" -eq 60 ]; then
              echo "❌ Certificate not found after waiting. Exiting." >> /var/log/certbot-wait-error.log
              exit 1
            fi
          done

          cat > /etc/nginx/conf.d/${DomainName}.conf << EOF
          server {
              listen 443 ssl;
              server_name ${DomainName};

              ssl_certificate /etc/letsencrypt/live/${DomainName}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/${DomainName}/privkey.pem;

              location / {
                  proxy_pass http://127.0.0.1:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
              }
          }

          server {
              listen 80;
              server_name ${DomainName};
              return 301 https://\$host\$request_uri;
          }
          EOF

          systemctl reload nginx

          # Create systemd service to auto-start Node.js server
          cat > /etc/systemd/system/transcribe.service << EOF
          [Unit]
          Description=KriyaBot Transcribe Server
          After=network.target

          [Service]
          ExecStart=/usr/bin/node /home/ec2-user/app/server.js
          Restart=always
          User=ec2-user
          Environment=NODE_ENV=production
          WorkingDirectory=/home/ec2-user/app

          [Install]
          WantedBy=multi-user.target
          EOF

          systemctl daemon-reexec
          systemctl daemon-reload
          systemctl enable transcribe
          systemctl start transcribe

  ElasticIP:
    Type: AWS::EC2::EIP

  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref TranscribeProxyInstance
      EIP: !Ref ElasticIP

Outputs:
  ElasticIP:
    Description: Elastic IP assigned to EC2 instance
    Value: !Ref ElasticIP

  AppURL:
    Description: App endpoint (HTTPS)
    Value: !Sub "https://${DomainName}"

  WebSocketURL:
    Description: WebSocket endpoint (WSS)
    Value: !Sub "wss://${DomainName}"
